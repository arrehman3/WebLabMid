pipeline {
    agent any
    environment { 
        MAIN_DIR = '/var/lib/jenkins/DevOps/WebLabMid'  // Define the directory once
        TEST_DIR = "${MAIN_DIR}/web-mid/selenium-tests" // Optional: if you're using this too
    }
    stages {
        stage('Clean Workspace') {
            steps {
                sh '''
                    # Make sure the base DevOps folder exists
                    mkdir -p /var/lib/jenkins/DevOps

                    # Clean the subdirectory where we'll clone the repo
                    rm -rf /var/lib/jenkins/DevOps/WebLabMid

                    echo "Cleaned /var/lib/jenkins/DevOps/WebLabMid/"
                '''
            }
        }

        stage('Fetch Code') {
            steps {
                sh 'git clone https://github.com/arrehman3/WebLabMid.git /var/lib/jenkins/DevOps/WebLabMid'
            }
        }

        stage('Run Selenium Tests') {
            steps {
                dir('/var/lib/jenkins/DevOps/WebLabMid/web-mid') {
                    sh '''
                        # Install dependencies for selenium tests
                        cd selenium-tests && npm install

                        # Start the application for testing
                        cd ../backend && npm start &
                        cd ../frontend && npm install && npm run dev &
                        
                        # Wait for the application to start
                        sleep 60
                        
                        # Run selenium tests
                        cd ../selenium-tests && npm test
                        
                        # Clean up
                        pkill -f "node"
                    '''
                }
            }
        }

        stage('Build and Start Backend') {
            steps {
                dir('/var/lib/jenkins/DevOps/WebLabMid/web-mid/backend') {
                    sh '''
                        docker build -t web-mid-backend .
                        docker compose up -d --build
                    '''
                }
            }
        }

        stage('Build and Start Frontend') {
            steps {
                dir('/var/lib/jenkins/DevOps/WebLabMid/web-mid/frontend') {
                    sh '''
                        docker build -t web-mid-frontend .
                        docker compose up -d
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                def authorEmail = sh(
                    script: "cd $MAIN_DIR && git log -1 --pretty=format:'%ae'",
                    returnStdout: true
                ).trim()

                emailext (
                    to: authorEmail,
                    subject: "‚úÖ Jenkins Test Results - ${currentBuild.currentResult}",
                    body: """
            Hi ${authorEmail},

            Your GitHub push triggered an automated test run via Jenkins.

            üîß *Status:* ${currentBuild.currentResult}  
            üîÅ *Build #:* ${env.BUILD_NUMBER}  
            üìú *Details:* ${env.BUILD_URL}

            Regards,  
            ü§ñ Jenkins Bot
            """,
                    attachmentsPattern: "${TEST_DIR}/test_output.txt"
                )
            }clean up any running processes
            
        }
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}

//checking2
